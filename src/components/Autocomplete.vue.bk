<template>
<div style="position:relative" v-bind:class="{'open':openSuggestion}">
    <!-- <input class="form-control" type="text"
        @keydown.enter = 'enter'
        @keydown.down = 'down'
        @keydown.up = 'up'
        @input = 'change'
    /> -->
    <v-text-field
    class="form-control"
    v-model="selection"

    name="input-1-3"
    label="Buscar Libro"
    append-icon="search"
    single-line
    ligth
    slot="activator"
    @keydown.enter = 'enter'
    @keydown.down = 'down'
    @keydown.up = 'up'
    @input = 'change'
    ></v-text-field>
    <ul class="dropdown-menu" style="width:100%">
        <li v-for="suggestion in matches"
            v-bind:class="{'active': isActive(0)}"
            @click="suggestionClick(0)"
        >
            <a href="#">{{ suggestion }}</a>
        </li>
    </ul>
</div>
</template>

<style>
.cnt{
      background-color:#DDAADD;
      margin:0px;
      padding:0px;
      font-weight:bold
    }
    .trans{
      background-color:#00BB00;
      color:#CC0000;
      position:absolute;
      text-align:center;
      top:50px;
      left:40px;
      padding:65px;
      font-size:25px;
      font-weight:bold;
      width:300px;
    }
    ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    width: 200px;
    background-color: #FFF;
    position: absolute;
}

li a {
    display: block;
    color: #444 !important;
    padding: 8px 16px;
    text-decoration: none;
    text-align: left;
}

/* Change the link color on hover */
li a:hover {
    background-color: #EEE;
    /*color: white;*/
}
</style>

<script>
// import Vue from 'vue';
export default {
    data() {
        return {
            open: false,
            current: 0
        }
    },
    props: {
        suggestions: {
            type: Array,
            required: true
        },
        selection: {
            type: String,
            required: true,
            twoWay: true
        }
    },
    computed: {
        matches() {
            return this.suggestions.filter((str) => {
                return str.indexOf(this.selection) >= 0;
            });
        },
        openSuggestion() {
            return this.selection !== "" &&
                   this.matches.length != 0 &&
                   this.open === true;

        }
    },
    methods: {
        enter() {
            this.selection = this.matches[this.current];
            this.open = false;
        },
        up() {
            if(this.current > 0)
                this.current--;
        },
        down() {
            if(this.current < this.matches.length - 1)
                this.current++;
        },
        isActive(index) {
            return index === this.current;
        },
        change() {
            if (this.open == false) {
                this.open = true;
                this.current = 0;
            }
        },
        suggestionClick(index) {
            this.selection = this.matches[index];
            this.open = false;
        },
    }
}
</script>
